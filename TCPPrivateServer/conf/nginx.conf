user drelang;
worker_processes 4;
worker_rlimit_nofile 100000;

error_log logs/error.log;

pid logs/nginx.pid;

events{
    use epoll;
    worker_connections 10000;
}

# stream 模块定义了一个监听在 1688 端口上的 TCP 服务
stream{
    tcp_nodelay on;

    lua_package_path "/usr/local/lib/lua/5.1/?.lua;$prefix/lua/?.lua;;";

    server{
        listen 127.0.0.1:1688;
        listen 10.113.141.121:1688;
        listen 120.26.142.207:1688;
        lua_socket_log_errors off;
        content_by_lua_file ddp.lua;
    }
}

http{
    include mime.types;
    default_type text/html;

    access_log off;
    server_tokens off;

    # 定义了 4 个共享内存对象，用于进程间通信以及 web 端和 DDP 服务间交换命令
    lua_shared_dict gvar 50m;
    lua_shared_dict gmsg 50m;
    lua_shared_dict gkey 200m;
    lua_shared_dict gsess 30m;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    open_file_cache max=10240 inactive=60s;
    open_file_cache_valid 80s;
    open_file_cache_min_uses 1;

    keepalive_timeout 0;
    chunked_transfer_encoding off;
    lua_package_path "/usr/local/lib/lua/5.1/?.lua;$prefix/lua/?.lua;;";
    init_worker_by_lua_file init.lua;

    upstream bk_mysql{
        drizzle_server 10.47.104.71:3306 protocol=mysql dbname=testserver user=ets password=ManNiu1545~#;
        drizzle_skeepalive max=300 overflow=reject mode=single;
    }

    upstream bk_redis{
        server 10.47.104.71:6379;
        keepalive 1000;
    }

    # 为 web 提供 Rest 接口，配置在 server 下
    server{
        listen 9000 default so_keepalive=on;
        server_name 10.175.194.47;
        charset utf-8;
        location /redis_set_ex {
            include /usr/local/ip_limit.conf;
            set $key $arg_key;
            set $expire $arg_expire;
            redis2_query set $key $request_body;
            redis2_query expire $key $expire;
            redis2_pass bk_redis;
        }

        location /redis_expire {
            include /usr/local/ip_limit.conf;
            set $key $arg_key;
            set $expire $arg_expire;
            redis2_query expire $key $expire;
            redis2_pass bk_redis;
        }

        location /redis_persist {
            # include /usr/local/ip_limit.conf;
            set $key $arg_key;
            redis2_query persist $key;
            redis2_pass bk_redis;
        }

        location /redis_set1 {
            # include /usr/local/ip_limit.conf;
            set $key $arg_key;
            redis2_query set $key $request_body;
            redis2_query expire $key 86400;
            redis2_pass bk_redis;
        }

        location /redis_set0 {
            # include /usr/local/ip_limit.conf;
            set $key $arg_key;
            redis2_query set $key $request_body;
            redis2_pass bk_redis;
        }

        location /redis_get {
            # include /usr/local/ip_limit.conf;
            set $key $arg_key;
            redis2_query get $key;
            # redis2_query expire $key 86400;
            redis2_pass bk_redis;
        }

        location /redis_exists {
            # include /usr/local/ip_limit.conf;
            set $key $arg_key;
            redis2_query exists $key;
            redis2_pass bk_redis;
        }

        location /redis_del{
            # include /usr/local/ip_limit.conf;
            set $key $arg_key;
            redis2_query del $key;
            redis2_pass bk_redis;   
        }

        location /mt_redis_set_ex {
            # include /usr/local/ip_limit.conf;
            # access_by_lua_file access.lua;
            content_by_lua '
            local val=ngx.unescape_uri(ngx.var.arg_val)
            local resp=ngx.location.capture("/redis_set_ex?key=" .. ngx.var.arg_key .. "&expire=" .. ngx.var.arg_expire, {
                method=ngx.HTTP_POST, body=val
            })
            ngx.exit(resp.status)';
        }

        location /mt_redis_set1 {
            # include /usr/local/ip_limit.conf;
            # access_by_lua_file access.lua;
            content_by_lua '
            local val=ngx.unescape_uri(ngx.var.arg_val)
            local resp=ngx.location.capture("/redis_set1?key=" .. ngx.var.arg_key, {
                method=ngx.HTTP_POST, body=val
            })
            ngx.exit(resp.status)';
        }

        location /mt_redis_set0 {
            # include /usr/local/ip_limit.conf;
            # access_by_lua_file access.lua;
            content_by_lua '
            local val=ngx.unescape_uri(ngx.var.arg_val)
            local resp=ngx.location.capture("/redis_set0?key=" .. ngx.var.arg_key, {
                method=ngx.HTTP_POST, body=val
            })
            ngx.exit(resp.status)';
        }

        location /mysql {
            # include /usr/local/ip_limit.conf;
            drizzle_pass bk_mysql;
            drizzle_query $request_body;
            # rds_csv on;
            # rds_csv_field_name_header off;
        }

        location /exec_sql {
            # include /usr/local/ip_limit.conf;
            # access_by_lua_file access.lua;
            content_by_lua '
            local val=ngx.unescape_uri(ngx.var.arg_val)
            local resp=ngx.location.capture("/mysql", {
                method=ngx.HTTP_POST, body=sql
            })
            if resp.status ~= ngx.HTTP_OK or not resp.body then
                ngx.exit(resp.status)
            end
            ngx.print(resp.body)';
        }

        location /mdp/getConfig {
            lua_need_request_body on;
            client_max_body_size 50k;
            client_body_buffer_size 50k;
            # access_by_lua_file access.lua;
            content_by_lua'
            local gwId=ngx.var.arg_gwId
            local vdata={}
            local cjson=require "cjson"

            vdata["name"]="DDP"
            vdata["version"]="v1.0"
            vdata["session"]=1
            vdata["command"]=8
            vdata["flow"]=0
            vdata["sequence"]=1

            vdata["gwId"]=gwId
            vdata["cfgData"]=cfgData

            local devCmdKey = "get_config_request_" .. gwId
            local resp = ngx.location.capture("/redis_set1?key=" .. devCmdKey, {method=ngx.HTTP_POST, body=jsonRequest})
            
            local sock = ngx.socket.tcp()
            local ok, err = sock:connect(10.233.122.31, 1688)
            if not ok then
                return
            end
            sock:send("from web.")
            sock:close();

            local responseKey="get_config_response_" .. gwId
            for i = 1, 10, 1 do
                resp = ngx.location.capture("/redis_get?key=" .. responseKey)
                if resp.status == ngx.HTTP_OK and resp.body then
                    local parser=require "redis.parser"
                    local res, typ = parser.parse_reply(resp.body)
                    resp = ngx.location.capture("/redis_del?key=" .. responseKey)
                    if res ~= nil then
                        ngx.print(res)
                        ngx.exit(200)
                    end
                else
                    break
                end
                ngx.sleep(1)
            end
            ';
        }
    }
}

